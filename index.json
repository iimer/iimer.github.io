[{"categories":["安全"],"content":"身份认证与授权的方式总结。","date":"2023-03-21","objectID":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/","tags":["安全","身份认证与授权"],"title":"身份认证与授权","uri":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/"},{"categories":["安全"],"content":"认证、授权和凭证是什么？ ","date":"2023-03-21","objectID":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/:1:0","tags":["安全","身份认证与授权"],"title":"身份认证与授权","uri":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/"},{"categories":["安全"],"content":"认证 通过某种方式，验证了当前用户的身份 功能侧： 用户名密码登录 手机号接收验证码 邮箱验证码 指纹识别 人脸识别 ","date":"2023-03-21","objectID":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/:1:1","tags":["安全","身份认证与授权"],"title":"身份认证与授权","uri":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/"},{"categories":["安全"],"content":"授权 用户授予第三方访问某些资源的权限 访问相册、地理位置 ","date":"2023-03-21","objectID":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/:1:2","tags":["安全","身份认证与授权"],"title":"身份认证与授权","uri":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/"},{"categories":["安全"],"content":"凭证 类似现代生活的身份证，首次认证如用户名密码通过之后，就可以生成对应的凭证，进行认证。 ","date":"2023-03-21","objectID":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/:1:3","tags":["安全","身份认证与授权"],"title":"身份认证与授权","uri":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/"},{"categories":["安全"],"content":"Cookie、 ","date":"2023-03-21","objectID":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/:2:0","tags":["安全","身份认证与授权"],"title":"身份认证与授权","uri":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/"},{"categories":["安全"],"content":"Cookie HTTP是无状态的，需要维护一个状态来让服务器端知道请求来自同一个地方 存储于客户端 一个domain一个cookie，不可跨域 浏览器控制台查看cookie： Expires为Session，关闭该浏览器全部页面后，即结束浏览器这个应用时cookie重置。 cookie一行属性含义： 属性 含义 Name 键值对的键 Value 键值对的值 Domain 指定cookie该行所属域名，默认当前域名 Path 指定cookie该行在哪个路由下生效，默认’/'。如设置/api，只有/api的路由可以拿到cookie的该行。 Expires/MaxAge cookie失效时间，默认浏览器关闭就结束。 Size name+value的字节长度 HttpOnly 为true时，不可被js脚本访问。但还是可以在Application中手动修改cookie。 Secure 是否使用安全协议传输。true则在http中无效，只有在https中生效。 SameSite 用于防范CSRF攻击和用户追踪。分为三个值：Strict、Lax、None。Strict表示完全不会在第三方网站发cookie。Lax表示可以发一些请求的，标签为：a、link或者是表单的get请求。None则没有限制。 Partition Key Priority 优先级。当cookie的数量超出限制的时候，就会优先清楚低优先级的。 ","date":"2023-03-21","objectID":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/:2:1","tags":["安全","身份认证与授权"],"title":"身份认证与授权","uri":"/posts/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/"},{"categories":["计算机网络"],"content":"HTTP和HTTPS的内容介绍和对比。","date":"2023-03-20","objectID":"/posts/http%E5%92%8Chttps/","tags":["计算机网络"],"title":"HTTP和HTTPS","uri":"/posts/http%E5%92%8Chttps/"},{"categories":["计算机网络"],"content":"HTTP ","date":"2023-03-20","objectID":"/posts/http%E5%92%8Chttps/:1:0","tags":["计算机网络"],"title":"HTTP和HTTPS","uri":"/posts/http%E5%92%8Chttps/"},{"categories":["计算机网络"],"content":"HTTP是什么？ HTTP，又称为超文本传输协议。 https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==\u0026mid=2247483971\u0026idx=1\u0026sn=8f2d5dae3d95efc446061b352c8e9961\u0026scene=21#wechat_redirect ","date":"2023-03-20","objectID":"/posts/http%E5%92%8Chttps/:1:1","tags":["计算机网络"],"title":"HTTP和HTTPS","uri":"/posts/http%E5%92%8Chttps/"},{"categories":["计算机网络"],"content":"存在的风险 HTTP 由于是明文传输，所以随意使用一个抓包工具都可以截获通信的内容。 所以就有以下三种风险： 窃听风险 篡改风险 冒充风险 ","date":"2023-03-20","objectID":"/posts/http%E5%92%8Chttps/:1:2","tags":["计算机网络"],"title":"HTTP和HTTPS","uri":"/posts/http%E5%92%8Chttps/"},{"categories":["计算机网络"],"content":"HTTPS HTTPS，也成为HTTP over TLS，TLS前身是SSL，有各种版本。 https请求的流程如下： 先进行TCP三次握手，连接到服务器端的443端口。 客户端发送Client Hello包给服务器端，主要包含TLS版本、一个随机数、复用之前连接的sessionid、支持的加密规则、要访问的域名。 服务器端响应Server Hello包给客户端，对应TLS版本、一个随机数、选中的加密规则。 服务器根据域名，查找对应的证书，存下私钥，然后将证书返回给客户端。 客户端验证证书的合法性，证书验证通过后，生成一个随机的对称密钥，用证书的公钥加密，然后发送给服务器端。 改变加密约定，并通知服务端，之后的消息开始启用加密 客户端发送验证报文，确保消息的完整性 服务器端接收到加密的对称密钥，用私钥进行解密，就得到了对称的密钥。 改变加密约定，并通知客户端，之后的消息开始用加密 服务端发送验证报文，确保消息的完整性 此时就可以进行对称加密解密了，但是不会放在传输报文中，即不会暴露。 安全性： 此安全性，是在保证对称密钥不被泄露的情况下且在公网，且不信任别的证书。 保证了同一连接下端到端的数据安全，身份认证和识别不会在此保证。 内容会有完整性校验。 客户端和服务器端都不会被伪造。 且在浏览器端的控制台是可以看到加密前的数据的，如果有密码这样的敏感数据，需要再用==RSA==进行单独加密。 证书是需要申请的，可以对应*.baidu.com这样的通用域名，然后部署到对应的服务器上就可以使用HTTPS了。 https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==\u0026mid=2247487650\u0026idx=1\u0026sn=dfee83f6773a589c775ccd6f40491289\u0026scene=21#wechat_redirect ","date":"2023-03-20","objectID":"/posts/http%E5%92%8Chttps/:2:0","tags":["计算机网络"],"title":"HTTP和HTTPS","uri":"/posts/http%E5%92%8Chttps/"},{"categories":["安全"],"content":"如今解决接口安全的方法总结。","date":"2023-03-17","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/","tags":["安全"],"title":"接口安全的方式","uri":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"},{"categories":["安全"],"content":"前言 数据安全是现在越来越注重的话题，进入一家企业工作，清楚数据安全的处理机制对接口开发有着不小的帮助。 ","date":"2023-03-17","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/:1:0","tags":["安全"],"title":"接口安全的方式","uri":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"},{"categories":["安全"],"content":"如何保证数据安全 ","date":"2023-03-17","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/:2:0","tags":["安全"],"title":"接口安全的方式","uri":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"},{"categories":["安全"],"content":"数据涉及的point 数据传输的过程 考虑的是不被窃听、篡改、冒充 服务端接收数据 考虑的是数据验证，身份验证和防止攻击（如DoS） 数据库存储 考虑的是脱敏数据（如密码） ","date":"2023-03-17","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/:2:1","tags":["安全"],"title":"接口安全的方式","uri":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"},{"categories":["安全"],"content":"安全措施 数据加密算法 比较简单的是对称加密算法（如==AES==），哈希算法（如==MD5==）。 对称加密：加解密都用相同的密钥。 对称加密算法，在传输过程中会将密钥发给服务器端，假如数据被截获，那么数据和密钥都会被拿到，加密后的数据就可以被解密。不够安全。 更为安全和常用的是非对称加密算法（如==RSA==、==SM2==）。 非对称加密：公钥加密，私钥解密，成对出现。 但是非对称加密算法有个问题，公钥只具备加密功能，私钥只具备解密功能，所以这只有从浏览器发请求给服务器端的时候才会加密。 而实现请求和响应都加密，则需要配合对称加密算法，https便是如此。 HTTP和HTTPS的内容介绍和对比 数据加签验签 HTTPS在某些情况下，传输中是可能被篡改信息的。 加签验签是一种防止被篡改的校验。 该过程中，主要涉及 原始报文 加密后的报文 用私钥二次加密的签名，==sign== 验证是否被篡改，主要是靠私钥加密，公钥解密。 过程如下 客户端加签：原始报文-\u003ehash算法加密-\u003e私钥加密得到sign 发送 原始报文 + sign 服务端验签：原始报文-\u003ehash算法加密 和 公钥解密sign的值比对，如果相等，那就没被篡改过。 假如hacker用公钥解密了sign，但是他篡改后无法得到相应的加密后的sign，在服务器端不会通过。但他在一定程度下还是可以实现窃听。 假如hacker通过客户端得到了私钥，那也就不安全了。 token授权认证 过程如下 用户输入用户名和密码，发起请求。 校验通过，生成唯一token，存在redis中，返回给客户端。 对特定的业务请求中，携带token信息，发送给服务器端。 服务器端收到token信息，得到对应的用户，进行业务操作。 token只保证身份验证，但传输过程中的安全性，需要靠别的技术保证。 如何保证token的安全 设置有效期 加密策略，如https、加签验签 设置白名单 请求超时机制 有的hacker不在乎信息是啥，直接将该请求信息拿出来无限发请求给后端，进行DOS攻击。 引入超时机制，让时间差大于一定时间的请求无效。 nonce防止重放攻击 如果时间差内，hacker进行重放攻击，请求超时机制就没用了。 让每个请求有个唯一被标识的字段==nonce==，每次请求后，服务器端存储该==nonce==，放在Set集合或者缓存或者数据库中，如果已存在则认为非法。 不可能记录所有请求==nonce==，数据量太大，所以需要结合请求超时机制，记录时间差内的标识即可。 限流机制 以上Dos攻击是由hacker发送的，默认不可以自己创建新的请求，而如果是用户自己反复点击创建新的请求，则也会有Dos风险。 可以使用Guava的RateLimiter单机版限流，也可以使用Redis分布式限流，还可以使用阿里开源组件sentinel限流。比如说，一分钟可以接受多少次请求。 经典限流算法 黑名单机制 对黑名单发起的请求，直接认为非法。 白名单机制 可以只让特定的IP访问系统，如新客户都需要申请白名单之后，才可以进行访问。 面向开发的数据脱敏 日志和数据库中的敏感信息，都应该加密存储和显示。 数据参数一些合法性校验 服务器端应该还有相应的参数校验，如手机号，身份证等。 ","date":"2023-03-17","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/:2:2","tags":["安全"],"title":"接口安全的方式","uri":"/posts/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"},{"categories":["tools"],"content":"hugo的搭建、部署、主题切换和日常运用。","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"环境准备 (hugo中文网) hugo git ","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:1:0","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"新建项目 hugo new site [项目名称]\r进入项目根目录 # 本地启动\rhugo server\r","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:2:0","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"新建文件 进入项目根目录 hugo new [文件名]\r新文件默认为草稿，对应draft: true。可以修改模板文件。 要想启动时显示该文件，需要加上参数-D或者将draft的值改为false。 hugo server -D\r 在创建完第一个文件后，可以在此文件目录下直接创建别的文件，不需要每次都敲代码。 但必须保证开头的格式与第一个文件相同。 ","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:3:0","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"引入主题 ","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:4:0","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"基本套路 下载对应github的zip包，并解压到项目themes目录下。 修改根目录下config.toml文件，指定对应的主题，如LoveIt。 # 更改使用 Hugo 构建网站时使用的默认主题\r theme = \"LoveIt\"\r 其余按照主题特定的文档修改即可。 ","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:4:1","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"LoveIt 主题文档 ","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:4:2","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"部署发布 ","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:5:0","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"部署github 项目根目录下，生成public文件夹（页面的静态文件） hugo\r创建仓库，格式为：[github用户名].github.io，如下图： 将public文件夹提交到此仓库，为git基础操作，不再记录。 访问对应的地址，如：https://iimer.github.io/ ","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:5:1","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"分离项目 一般我们记录博客是不会直接操作public里面的静态文件的，所以存储hugo项目才是最为重要的事情。 分离主要是public和源hugo项目： public关联部署的库 源hugo关联新库，并用.gitignore文件来隔离public文件夹。 在我们写完博客后，要将以上两个项目分别提交。 ","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:6:0","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["tools"],"content":"图片资源 因为生成public文件的规则，图片路径为/-lib/images/[filename]/… 本地用的是typora，存的是相对路径，对应的是../../static/-lib/images/[filename]/… 在必要时需要把文件目录互换： /-lib/images\r\u003c-\u003e\r../../-static/lib/images\r 多加一个 ‘-’ ，是为了防止被覆盖 ","date":"2023-03-15","objectID":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:7:0","tags":["tools","hugo"],"title":"hugo的使用","uri":"/posts/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":null,"content":"企业身份认证：IAM、SSO ","date":"0001-01-01","objectID":"/posts/%E4%BC%81%E4%B8%9A%E6%A1%86%E6%9E%B6/:0:0","tags":null,"title":"","uri":"/posts/%E4%BC%81%E4%B8%9A%E6%A1%86%E6%9E%B6/"}]